from ctypes import GetLastError
import socket               # Import socket module
import time
import threading
import select
import sys
import datetime

#from types import ClassMethodDescriptorType

dsInit1 = [0x00, 0x06, 0x00, 0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x27]

dsInit2 = [0x02, 0x00, 0x00, 0x39, 0x01, 0x00, 0x0C, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x30, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x40, 0x32, 0x00, 0x1F,
           0x41, 0x50, 0x49, 0x5F, 0x32, 0x30, 0x31, 0x37, 0x31, 0x32, 0x30, 0x37, 0x5F, 0x56, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]


authCode = [0x02, 0x00, 0x00, 0xAB, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0x30, 0x26, 0xE5, 0x02, 0x01, 0x92, 0xE7, 0x55, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEA, 0x40, 0x33, 0x01, 0x35, 0xE3, 0x80, 0x13, 0x0D, 0x73, 0xCB, 0xB9, 0xD1, 0x47, 0xC1, 0x36, 0xF6, 0x63, 0x23, 0x22, 0xAA, 0xC0, 0x74, 0x4C, 0x09, 0xAF, 0x1A, 0x2E, 0x88, 0x7C, 0x50, 0xBA, 0x5A, 0x84, 0x6A, 0xAF, 0x3B, 0x90, 0xE0, 0xE1, 0x8A, 0x6A, 0x92, 0xCE, 0xB5, 0x81, 0x88, 0x96, 0x98, 0x5E, 0x81, 0xBA, 0xAB, 0xA0, 0xB9, 0xF3, 0xE0, 0xEE, 0x29, 0xFE, 0xF9, 0x6E, 0x86, 0x08, 0x22,
            0xC2, 0x01, 0x68, 0x2F, 0xD6, 0x69, 0x46, 0xF7, 0x41, 0x1C, 0x3D, 0x6F, 0x65, 0xCA, 0x8A, 0xF1, 0xFE, 0x3B, 0xE0, 0xE4, 0x4B, 0x29, 0xC3, 0x3B, 0xBB, 0xD2, 0xBF, 0xC5, 0x4E, 0xFD, 0x04, 0x70, 0x26, 0x86, 0x8A, 0x69, 0xFE, 0x02, 0x31, 0x75, 0xFC, 0x31, 0xE0, 0xE0, 0x86, 0xF4, 0x0E, 0x4A, 0x02, 0x16, 0x2F, 0x95, 0xD7, 0xE0, 0xE0, 0x1A, 0x15, 0x5C, 0xE0, 0xEB, 0x58, 0x54, 0xA4, 0x84, 0x27, 0xC9, 0x0A, 0x6E, 0xFF, 0x6F, 0x3E, 0x72, 0x3D, 0xAF, 0xA3, 0x1F, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEC]


dsAuthRes = [0x02, 0x00, 0x01, 0x4b, 0x01, 0x00,
             0x0c, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x27]

authSuccess = [0x02, 0x00, 0x00, 0x13, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0x30,
               0x28, 0xE5, 0x01, 0xE1, 0x59, 0xE7, 0x55, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEA]

dsLogin = [0x02, 0x00, 0x01, 0x12, 0x01, 0x00,
           0x0c, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00]

loginSuccess = [0x02, 0x00, 0x00, 0x38, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0x30, 0x01, 0xE5, 0x02, 0x01,
                0x01, 0x1e, 0x55, 0xE4, 0x43, 0x54, 0x50, 0x3A, 0x4E, 0x6F, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72]

data_ctp = [0x02, 0x00, 0x00, 0x44, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0xF1, 0x03, 0xE5, 0x02, 0xE1, 0xA6, 0xE4, 0x24, 0x39, 0xE1, 0x86, 0x6A, 0x32,
            0x32, 0x30, 0x36, 0xEF, 0xEB, 0x32, 0x31, 0x3A, 0x32, 0x31, 0x3A, 0x30, 0x36, 0xE4, 0x7A, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x31, 0x37, 0xE1,
            0x6A, 0x32, 0x32, 0x30, 0x36, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xE1, 0x24, 0x34, 0xE1, 0x18, 0x40, 0xA5, 0x71, 0xE8, 0x01, 0x40, 0xA5, 0xE0, 0xEA, 0xE8, 0x01]

gSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socklst = [gSock]

print('Total number of arguments:', format(len(sys.argv)))
SvrIp = "172.20.16.165"
SvrPort = 8001

if len(sys.argv) >= 2:
    serverInfo = sys.argv[1].split(":")
    SvrIp = serverInfo[0]
    SvrPort = int(serverInfo[1])

eventAuth = threading.Event()
eventAuthSuccess = threading.Event()
eventLoginSuccess = threading.Event()


def WorkingThread(conn, _thIndex):
    logined = False
    while True:
        try:
            nt = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            if logined:
                print('{2} send data_ctp to client. len:{1} thIndex:{0} \n'.format(
                    _thIndex, len(data_ctp), nt))
                conn.sendall(bytearray(data_ctp))
                time.sleep(0.001)
                continue
            # recv can throw socket.timeout
            msg = conn.recv(1024)
            if not msg:
                print('\n {1} Disconnected from client. wkthread: {0}, error:{2} -----> \n'.format(
                    _thIndex, nt, GetLastError()))
                conn.close()
                break
            else:
                #print('Recv msg {0}\n'.format(bytearray(msg)))
                if(bytearray(msg) == bytearray(dsInit1)):
                    print('{1} Recv init1 msg, wkthread: {0} \n'.format(
                        _thIndex, nt))
                elif(bytearray(msg[7:]) == bytearray(dsInit2[7:])):
                    print('{1} Recv init2 msg, send authCode to client. wkthread: {0} \n'.format(
                        _thIndex, nt))
                    conn.sendall(bytearray(authCode))
                elif (bytearray(msg[7:14]) == bytearray(dsAuthRes[7:])):
                    print('{1} Recv authRes msg, send authSuccess to client. wkthread: {0}  \n'.format(
                        _thIndex, nt))
                    conn.sendall(bytearray(authSuccess))
                elif (bytearray(msg[7:14]) == bytearray(dsLogin[7:])):
                    print('{1} Recv login msg, send loginSuccess to client. wkthread: {0}  \n'.format(
                        _thIndex, nt))
                    conn.sendall(bytearray(loginSuccess))
                    logined = True
                    conn.sendall(bytearray(data_ctp))
                else:
                    print('{2} send data_ctp to client. len:{1} thIndex:{0} \n'.format(
                        _thIndex, len(data_ctp), nt))
                    conn.sendall(bytearray(data_ctp))
                    time.sleep(0.01)
        except Exception as e:
            print('in gw working thread {0}, throw an exception:{1} '.format(
                _thIndex, e))
            time.sleep(0.1)
            break


def Server_program():
    global gSock

    gSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    gSock.bind((SvrIp, SvrPort))
    gSock.listen(100)
    print("gw-server listen on {0}:{1} \n".format(SvrIp, SvrPort))
    _thIndex = 0
    while True:
        try:
            # accept can throw socket.timeout
            conn, addr = gSock.accept()
            print('gw-server accept connection from {0} \n'.format(addr))
            _thIndex += 1
            wkSvr = threading.Thread(
                name='Client-Thread', target=WorkingThread, args=(conn, _thIndex))
            wkSvr.start()

        except Exception as e:
            print('in gw acceptting process, throw an exception: ', e)
            time.sleep(0.1)


if __name__ == '__main__':
    thSvr = threading.Thread(name='Client-Thread', target=Server_program)
    thSvr.start()
    thSvr.join()
