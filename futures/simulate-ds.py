from ctypes import GetLastError
import socket               # Import socket module
import time
import threading
import select
import sys
import datetime

#from types import ClassMethodDescriptorType

dsInit1 = [0x00, 0x06, 0x00, 0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x27]

dsInit2 = [0x02, 0x00, 0x00, 0x39, 0x01, 0x00, 0x0C, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x30, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x40, 0x32, 0x00, 0x1F,
           0x41, 0x50, 0x49, 0x5F, 0x32, 0x30, 0x31, 0x37, 0x31, 0x32, 0x30, 0x37, 0x5F, 0x56, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

authCode = [0x02, 0x00, 0x00, 0xAB, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0x30, 0x26, 0xE5, 0x02, 0x01, 0x92, 0xE7, 0x55, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEA, 0x40, 0x33, 0x01, 0x35, 0xE3, 0x80, 0x13, 0x0D, 0x73, 0xCB, 0xB9, 0xD1, 0x47, 0xC1, 0x36, 0xF6, 0x63, 0x23, 0x22, 0xAA, 0xC0, 0x74, 0x4C, 0x09, 0xAF, 0x1A, 0x2E, 0x88, 0x7C, 0x50, 0xBA, 0x5A, 0x84, 0x6A, 0xAF, 0x3B, 0x90, 0xE0, 0xE1, 0x8A, 0x6A, 0x92, 0xCE, 0xB5, 0x81, 0x88, 0x96, 0x98, 0x5E, 0x81, 0xBA, 0xAB, 0xA0, 0xB9, 0xF3, 0xE0, 0xEE, 0x29, 0xFE, 0xF9, 0x6E, 0x86, 0x08, 0x22,
            0xC2, 0x01, 0x68, 0x2F, 0xD6, 0x69, 0x46, 0xF7, 0x41, 0x1C, 0x3D, 0x6F, 0x65, 0xCA, 0x8A, 0xF1, 0xFE, 0x3B, 0xE0, 0xE4, 0x4B, 0x29, 0xC3, 0x3B, 0xBB, 0xD2, 0xBF, 0xC5, 0x4E, 0xFD, 0x04, 0x70, 0x26, 0x86, 0x8A, 0x69, 0xFE, 0x02, 0x31, 0x75, 0xFC, 0x31, 0xE0, 0xE0, 0x86, 0xF4, 0x0E, 0x4A, 0x02, 0x16, 0x2F, 0x95, 0xD7, 0xE0, 0xE0, 0x1A, 0x15, 0x5C, 0xE0, 0xEB, 0x58, 0x54, 0xA4, 0x84, 0x27, 0xC9, 0x0A, 0x6E, 0xFF, 0x6F, 0x3E, 0x72, 0x3D, 0xAF, 0xA3, 0x1F, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEC]

dsAuthRes = [0x02, 0x00, 0x01, 0x4B, 0x01, 0x00, 0x0C, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x30, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x35, 0x00, 0x00, 0x00, 0x00, 0x40, 0x34, 0x01, 0x31, 0x00, 0x00, 0x00, 0x80, 0x96, 0xC0, 0x8F, 0xC8, 0x87, 0x93, 0xA3, 0x73, 0x80, 0xB3, 0x7B, 0x0D, 0xAC, 0xBC, 0x1B, 0xE2, 0xBB, 0x3F, 0x48, 0xD4, 0xA0, 0x9A, 0xC3, 0x1B, 0xAC, 0xCC, 0xAC, 0xDC, 0x1F, 0x74, 0xA2, 0xA3, 0x14, 0x12, 0xA8, 0x7E, 0x79, 0x23, 0xD9, 0xB0, 0xF7, 0xF9, 0x9B, 0x51, 0x72, 0xAA, 0x28, 0xF1, 0x58, 0xE2, 0xEB, 0x02, 0x5D, 0xF0, 0x95, 0x36, 0x96, 0x66, 0xFA, 0xAC, 0xB2, 0xD2, 0xAF, 0x7B, 0x0B, 0x97, 0x0C, 0xEC, 0x05, 0xB4, 0x71, 0x58, 0x06, 0x4E, 0xDA, 0xD7, 0x71, 0x89, 0x86, 0xBF, 0x80, 0xCF, 0xCC, 0x7F, 0xC6, 0x0A, 0xA6, 0xB8, 0x14, 0xF4, 0x01, 0xE5, 0x00, 0x7E, 0x0F, 0x49, 0xDF, 0xC9, 0x6A, 0xCB, 0x4F, 0x05, 0x7B, 0x98, 0x3E, 0x97, 0xAF, 0x88, 0x7C, 0x87, 0xF3, 0xC2, 0x14, 0x41, 0x5F, 0x58, 0x74, 0x92, 0x64, 0x32, 0xAA, 0x7D, 0x46, 0x57, 0x07, 0x67, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

authSuccess = [0x02, 0x00, 0x00, 0x13, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0x30,
               0x28, 0xE5, 0x01, 0xE1, 0x59, 0xE7, 0x55, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEA]

dsLogin = [0x02, 0x00, 0x01, 0x12, 0x01, 0x00, 0x0C, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x02, 0x10, 0x02, 0x00, 0xE4, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x31, 0x36, 0x00, 0x33, 0x30, 0x34, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33, 0x32, 0x30, 0x38, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xEB, 0x86, 0xF3, 0x7D, 0x0D, 0xFC, 0xED, 0x29, 0xE9, 0x81, 0xC1, 0x0D, 0x34, 0x50, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x48, 0x4F, 0x53, 0x54, 0x20, 0x55, 0x73, 0x65, 0x72, 0x00, 0x46, 0x54, 0x44, 0x43, 0x20, 0x31, 0x32, 0x00, 0x00,
           0x00, 0x00, 0x30, 0x30, 0x3A, 0x31, 0x36, 0x3A, 0x33, 0x45, 0x3A, 0x32, 0x33, 0x3A, 0x46, 0x32, 0x3A, 0x38, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00]

loginSuccess = [0x02, 0x00, 0x00, 0x38, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0x30, 0x01, 0xE5, 0x02, 0x01,
                0x01, 0x1e, 0x55, 0xE4, 0x43, 0x54, 0x50, 0x3A, 0x4E, 0x6F, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72]

data_ctp = [0x02, 0x00, 0x00, 0x44, 0x01, 0x03, 0x10, 0x4C, 0xE4, 0xF1, 0x03, 0xE5, 0x02, 0xE1, 0xA6, 0xE4, 0x24, 0x39, 0xE1, 0x86, 0x6A, 0x32,
            0x32, 0x30, 0x36, 0xEF, 0xEB, 0x32, 0x31, 0x3A, 0x32, 0x31, 0x3A, 0x30, 0x36, 0xE4, 0x7A, 0x32, 0x30, 0x32, 0x31, 0x30, 0x39, 0x31, 0x37, 0xE1,
            0x6A, 0x32, 0x32, 0x30, 0x36, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xE1, 0x24, 0x34, 0xE1, 0x18, 0x40, 0xA5, 0x71, 0xE8, 0x01, 0x40, 0xA5, 0xE0, 0xEA, 0xE8, 0x01]

eventAuth = threading.Event()
eventAuthSuccess = threading.Event()
eventLoginSuccess = threading.Event()

print('Total number of arguments:', format(len(sys.argv)))
SvrIp = "172.20.16.165"
SvrPort = 8000
if len(sys.argv) >= 2:
    serverInfo = sys.argv[1].split(":")
    SvrIp = serverInfo[0]
    SvrPort = int(serverInfo[1])


def DecodeMsg(msg):
    bufLen = len(msg)
    if (len(msg) >= 14):
        if(bytearray(msg[7:14]) == bytearray(authCode[7:14])):
            m_hdrLen = 4
            m_bodylen = int.from_bytes(msg[2:4], "big")
            m_len = m_bodylen + 4
            if bufLen >= m_len:
                m_msgTp = "authCode"
                return (m_msgTp, m_len)
            else:
                return ("", 0)
        elif (bytearray(msg[7:14]) == bytearray(authSuccess[7:14])):
            m_hdrLen = 4
            m_bodylen = int.from_bytes(msg[2:4], "big")
            m_len = m_bodylen + 4
            if bufLen >= m_len:
                m_msgTp = "authSuccess"
                return (m_msgTp, m_len)
            else:
                return ("", 0)
        elif (bytearray(msg[7:14]) == bytearray(loginSuccess[7:14])):
            m_hdrLen = 4
            m_bodylen = int.from_bytes(msg[2:4], "big")
            m_len = m_bodylen + 4
            if bufLen >= m_len:
                m_msgTp = "loginSuccess"
                return (m_msgTp, m_len)
            else:
                return ("", 0)
        else:
            m_hdrLen = 4
            m_bodylen = int.from_bytes(msg[2:4], "big")
            m_len = m_bodylen + 4

            if bufLen >= m_len:
                m_msgTp = "ctp_data"
                return (m_msgTp, m_len)
            else:
                return ("", 0)
    else:
        return ("", 0)


def WorkingThrd():
    while True:
        time.sleep(0.01)
        try:
            nt = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            gSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            gSock.connect((SvrIp, SvrPort))
            print('{2} connect to server {0}:{1}\n'.format(SvrIp, SvrPort, nt))

            # gSock.settimeout(5)

            print('{0} send init1,init2 msg to server\n'.format(nt))
            gSock.sendall(bytearray(dsInit1))
            gSock.sendall(bytearray(dsInit2))
            glMsg = bytes()
            logined = False
            while True:
                try:
                    nt = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    if logined:
                        print('{0} send data_ctp to server \n'.format(nt))
                        gSock.sendall(bytearray(data_ctp))
                        time.sleep(0.001)
                        continue
                    # gSock.settimeout(3.0)
                    msg = gSock.recv(1024)
                    if not msg:
                        print('{0} Disconnected from server. error: {1}\n'.format(
                            nt, GetLastError()))

                        gSock.close()
                        break
                    else:
                        glMsg += msg
                        msgtype, dataLen = DecodeMsg(glMsg)
                        if dataLen > 0:
                            glMsg = glMsg[dataLen:]
                        else:
                            continue
                        if(msgtype == "authCode"):
                            print(
                                '{0} Recv authCode msg, send authRes to server \n'.format(nt))

                            gSock.sendall(bytearray(dsAuthRes))
                            eventAuth.set()
                        elif (msgtype == "authSuccess"):
                            print(
                                '{0} Recv authSuccess msg, send login to server \n'.format(nt))

                            gSock.sendall(bytearray(dsLogin))
                            eventAuthSuccess.set()
                        elif (msgtype == "loginSuccess"):
                            print(
                                '{0} Recv loginSuccess msg, done login-process \n'.format(nt))
                            eventLoginSuccess.set()
                            print('login success, done\n')
                            logined = True
                            gSock.sendall(bytearray(data_ctp))
                        else:
                            print('{0} send data_ctp to server \n'.format(nt))
                            gSock.sendall(bytearray(data_ctp))
                            time.sleep(0.1)

                except Exception as e:
                    print('in ds, throw an exception: ', e)
                    time.sleep(0.01)
                    break
        except Exception as e:
            print('in ds, throw an exception: ', e)
            time.sleep(0.01)
            continue


def client_program():
    thRcv = threading.Thread(name='Client-Thread', target=WorkingThrd)
    thRcv.start()


if __name__ == '__main__':
    thClient = threading.Thread(name='Client-Thread', target=client_program)
    thClient.start()
    thClient.join()
